import * as React from 'react';
import { styled, useTheme } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Drawer from '@mui/material/Drawer';
import CssBaseline from '@mui/material/CssBaseline';
import MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import List from '@mui/material/List';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import InboxIcon from '@mui/icons-material/MoveToInbox';
import { Navigate, Route, Routes, useNavigate } from 'react-router-dom';
import AppsIcon from '@mui/icons-material/Apps';
import AssignmentReturnedIcon from '@mui/icons-material/AssignmentReturned';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import Collapse from '@mui/material/Collapse';

const drawerWidth = 240;

export function PagesComponent() {
    const navigate = useNavigate();
    const theme = useTheme();
    const [open, setOpen] = React.useState(true);
    const [menuStates, setMenuStates] = React.useState({});

    const handleMenuToggle = (id) => {
        setMenuStates((prevState) => ({
            ...prevState,
            [id]: !prevState[id],
        }));
    };

    return (
        <Box sx={{ display: 'flex' }}>
            <CssBaseline />
            <AppBar position="fixed" open={open}>
                <Toolbar>
                    <Typography variant="h6" noWrap component="div">
                        Admin Panel
                    </Typography>
                </Toolbar>
            </AppBar>
            <Drawer
                sx={{
                    width: drawerWidth,
                    flexShrink: 0,
                    '& .MuiDrawer-paper': {
                        width: drawerWidth,
                        boxSizing: 'border-box',
                    },
                }}
                variant="persistent"
                anchor="left"
                open={open}
            >
                <DrawerHeader />
                <Divider />
                <List>
                    {[
                        { id: 1, title: "Dashboard", route: "dashboard", Icon: AppsIcon, isCollapsible: true, children: [{ id: 6, title: "Dashboard Child", route: "dashboard-child", Icon: AppsIcon }] },
                        { id: 2, title: "Categories", route: "categories", Icon: AssignmentReturnedIcon, isCollapsible: true, children: [{ id: 7, title: "Categories Child", route: "categories-child", Icon: AppsIcon }] },
                        {
                            id: 3, title: "Product", route: "product", Icon: InboxIcon, isCollapsible: true, children: [
                                { id: 8, title: "Product Child 1", route: "product-child-1", Icon: AppsIcon },
                                { id: 9, title: "Product Child 2", route: "product-child-2", Icon: AssignmentReturnedIcon },
                            ]
                        },
                        { id: 4, title: "Order", route: "order", Icon: InboxIcon },
                        { id: 5, title: "User", route: "user", Icon: InboxIcon },
                    ].map((item) => (
                        <React.Fragment key={item.id}>
                            <ListItemButton onClick={() => item.isCollapsible ? handleMenuToggle(item.id) : navigate(item.route)}>
                                <ListItemIcon>{<item.Icon />}</ListItemIcon>
                                <ListItemText primary={item.title} />
                                {item.isCollapsible && (menuStates[item.id] ? <ExpandLess /> : <ExpandMore />)}
                            </ListItemButton>
                            {item.isCollapsible && (
                                <Collapse in={menuStates[item.id]} timeout="auto" unmountOnExit>
                                    <List component="div" disablePadding>
                                        {item.children.map((child) => (
                                            <ListItemButton key={child.id} sx={{ pl: 4 }} onClick={() => navigate(child.route)}>
                                                <ListItemIcon>{<child.Icon />}</ListItemIcon>
                                                <ListItemText primary={child.title} />
                                            </ListItemButton>
                                        ))}
                                    </List>
                                </Collapse>
                            )}
                        </React.Fragment>
                    ))}
                </List>
            </Drawer>
            <Main open={open}>
                <DrawerHeader />
                <div>
                    <Routes>
                        <Route path='/' element={<Navigate to={"dashboard"} replace={true} />} />
                        <Route path='dashboard' element={<div>Dashboard</div>} />
                        <Route path='dashboard-child' element={<div>Dashboard Child</div>} />
                        <Route path='categories' element={<div>Categories</div>} />
                        <Route path='categories-child' element={<div>Categories Child</div>} />
                        <Route path='product' element={<div>Product</div>} />
                        <Route path='product-child-1' element={<div>Product Child 1</div>} />
                        <Route path='product-child-2' element={<div>Product Child 2</div>} />
                        <Route path='order' element={<div>Order</div>} />
                        <Route path='user' element={<div>User</div>} />
                    </Routes>
                </div>
            </Main>
        </Box>
    );
}

const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({
    flexGrow: 1,
    padding: theme.spacing(3),
    transition: theme.transitions.create('margin', {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: `-${drawerWidth}px`,
    ...(open && {
        transition: theme.transitions.create('margin', {
            easing: theme.transitions.easing.easeOut,
            duration: theme.transitions.duration.enteringScreen,
        }),
        marginLeft: 0,
    }),
}));

const AppBar = styled(MuiAppBar, {
    shouldForwardProp: (prop) => prop !== 'open',
})(({ theme, open }) => ({
    transition: theme.transitions.create(['margin', 'width'], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.leavingScreen,
    }),
    ...(open && {
        width: `calc(100% - ${drawerWidth}px)`,
        marginLeft: `${drawerWidth}px`,
        transition: theme.transitions.create(['margin', 'width'], {
            easing: theme.transitions.easing.easeOut,
            duration: theme.transitions.duration.enteringScreen,
        }),
    }),
}));

const DrawerHeader = styled('div')(({ theme }) => ({
    display: 'flex',
    alignItems: 'center',
    padding: theme.spacing(0, 1),
    ...theme.mixins.toolbar,
    justifyContent: 'flex-end',
}));
